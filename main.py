# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calc.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(300, 450)
        MainWindow.setMinimumSize(QtCore.QSize(300, 450))
        MainWindow.setStyleSheet("background-color: rgb(36, 31, 49);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.equal = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.equal.sizePolicy().hasHeightForWidth())
        self.equal.setSizePolicy(sizePolicy)
        self.equal.setObjectName("equal")
        self.gridLayout.addWidget(self.equal, 5, 2, 1, 1)
        self.five = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.five.sizePolicy().hasHeightForWidth())
        self.five.setSizePolicy(sizePolicy)
        self.five.setObjectName("five")
        self.gridLayout.addWidget(self.five, 3, 1, 1, 1)
        self.multiply = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.multiply.sizePolicy().hasHeightForWidth())
        self.multiply.setSizePolicy(sizePolicy)
        self.multiply.setObjectName("multiply")
        self.gridLayout.addWidget(self.multiply, 2, 3, 1, 1)
        self.point = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.point.sizePolicy().hasHeightForWidth())
        self.point.setSizePolicy(sizePolicy)
        self.point.setObjectName("point")
        self.gridLayout.addWidget(self.point, 5, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Sans Serif")
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setIndent(10)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 4)
        self.four = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.four.sizePolicy().hasHeightForWidth())
        self.four.setSizePolicy(sizePolicy)
        self.four.setObjectName("four")
        self.gridLayout.addWidget(self.four, 3, 0, 1, 1)
        self.six = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.six.sizePolicy().hasHeightForWidth())
        self.six.setSizePolicy(sizePolicy)
        self.six.setObjectName("six")
        self.gridLayout.addWidget(self.six, 3, 2, 1, 1)
        self.seven = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.seven.sizePolicy().hasHeightForWidth())
        self.seven.setSizePolicy(sizePolicy)
        self.seven.setObjectName("seven")
        self.gridLayout.addWidget(self.seven, 4, 0, 1, 1)
        self.plus = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plus.sizePolicy().hasHeightForWidth())
        self.plus.setSizePolicy(sizePolicy)
        self.plus.setObjectName("plus")
        self.gridLayout.addWidget(self.plus, 5, 3, 1, 1)
        self.three = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.three.sizePolicy().hasHeightForWidth())
        self.three.setSizePolicy(sizePolicy)
        self.three.setObjectName("three")
        self.gridLayout.addWidget(self.three, 2, 2, 1, 1)
        self.eight = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.eight.sizePolicy().hasHeightForWidth())
        self.eight.setSizePolicy(sizePolicy)
        self.eight.setObjectName("eight")
        self.gridLayout.addWidget(self.eight, 4, 1, 1, 1)
        self.devide = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.devide.sizePolicy().hasHeightForWidth())
        self.devide.setSizePolicy(sizePolicy)
        self.devide.setObjectName("devide")
        self.gridLayout.addWidget(self.devide, 3, 3, 1, 1)
        self.zero = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.zero.sizePolicy().hasHeightForWidth())
        self.zero.setSizePolicy(sizePolicy)
        self.zero.setObjectName("zero")
        self.gridLayout.addWidget(self.zero, 5, 1, 1, 1)
        self.minus = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.minus.sizePolicy().hasHeightForWidth())
        self.minus.setSizePolicy(sizePolicy)
        self.minus.setObjectName("minus")
        self.gridLayout.addWidget(self.minus, 4, 3, 1, 1)
        self.two = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.two.sizePolicy().hasHeightForWidth())
        self.two.setSizePolicy(sizePolicy)
        self.two.setObjectName("two")
        self.gridLayout.addWidget(self.two, 2, 1, 1, 1)
        self.one = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.one.sizePolicy().hasHeightForWidth())
        self.one.setSizePolicy(sizePolicy)
        self.one.setObjectName("one")
        self.gridLayout.addWidget(self.one, 2, 0, 1, 1)
        self.nine = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nine.sizePolicy().hasHeightForWidth())
        self.nine.setSizePolicy(sizePolicy)
        self.nine.setObjectName("nine")
        self.gridLayout.addWidget(self.nine, 4, 2, 1, 1)
        self.reset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.reset.sizePolicy().hasHeightForWidth())
        self.reset.setSizePolicy(sizePolicy)
        self.reset.setObjectName("reset")
        self.gridLayout.addWidget(self.reset, 1, 0, 1, 2)
        self.backspace = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.backspace.sizePolicy().hasHeightForWidth())
        self.backspace.setSizePolicy(sizePolicy)
        self.backspace.setObjectName("backspace")
        self.gridLayout.addWidget(self.backspace, 1, 2, 1, 2)
        self.horizontalLayout.addLayout(self.gridLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.add_functions()
        self.symbols = ["*", "/", "+", "-"]
        self.after_equal = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Calculator"))
        self.equal.setText(_translate("MainWindow", "="))
        self.five.setText(_translate("MainWindow", "5"))
        self.multiply.setText(_translate("MainWindow", "*"))
        self.point.setText(_translate("MainWindow", "."))
        self.label.setText(_translate("MainWindow", "0"))
        self.four.setText(_translate("MainWindow", "4"))
        self.six.setText(_translate("MainWindow", "6"))
        self.seven.setText(_translate("MainWindow", "7"))
        self.plus.setText(_translate("MainWindow", "+"))
        self.three.setText(_translate("MainWindow", "3"))
        self.eight.setText(_translate("MainWindow", "8"))
        self.devide.setText(_translate("MainWindow", "/"))
        self.zero.setText(_translate("MainWindow", "0"))
        self.minus.setText(_translate("MainWindow", "-"))
        self.two.setText(_translate("MainWindow", "2"))
        self.one.setText(_translate("MainWindow", "1"))
        self.nine.setText(_translate("MainWindow", "9"))
        self.reset.setText(_translate("MainWindow", "AC"))
        self.backspace.setText(_translate("MainWindow", "⌫"))
        
    def add_functions(self):
        self.zero.clicked.connect(lambda: self.write_num(self.zero.text()))
        self.one.clicked.connect(lambda: self.write_num(self.one.text()))
        self.two.clicked.connect(lambda: self.write_num(self.two.text()))
        self.three.clicked.connect(lambda: self.write_num(self.three.text()))
        self.four.clicked.connect(lambda: self.write_num(self.four.text()))
        self.five.clicked.connect(lambda: self.write_num(self.five.text()))
        self.six.clicked.connect(lambda: self.write_num(self.six.text()))
        self.seven.clicked.connect(lambda: self.write_num(self.seven.text()))
        self.eight.clicked.connect(lambda: self.write_num(self.eight.text()))
        self.nine.clicked.connect(lambda: self.write_num(self.nine.text()))
        self.plus.clicked.connect(lambda: self.write_num(self.plus.text()))
        self.minus.clicked.connect(lambda: self.write_num(self.minus.text()))
        self.multiply.clicked.connect(lambda: self.write_num(self.multiply.text()))
        self.devide.clicked.connect(lambda: self.write_num(self.devide.text()))
        self.point.clicked.connect(lambda: self.write_num(self.point.text()))
        self.backspace.clicked.connect(self.del_num)
        self.reset.clicked.connect(self.reset_label)
        self.equal.clicked.connect(self.do_equal)
    
    def write_num(self, num):
        if self.label.text() == "0":
            if num == "+":
                return
            elif num == "-":
                return
            elif num == "/":
                return
            elif num == "*":
                return
            elif num == ".":
                return
            else:
                self.label.setText(num)
                return
        elif self.after_equal:
            if num in self.symbols or num == ".":
                self.label.setText(self.label.text() + num)
                self.after_equal = False
                return
            self.label.setText(num)
            self.after_equal = False
            return
        elif num == ".":
            for i in self.symbols:
                if i in self.label.text():
                    if "." in self.label.text().split(i)[1]:
                        return
                    elif self.label.text().split(i)[1] == '':
                        return       
                    else:
                        self.label.setText(self.label.text() + num)
            else:
                if "." in self.label.text():
                    return
                else:
                    self.label.setText(self.label.text() + num)
        elif num in self.symbols:
            for i in self.symbols:
                if i in self.label.text():
                    return
            else:
                self.label.setText(self.label.text() + num)
        else:
            self.label.setText(self.label.text() + num)
    
    def del_num(self):
        if len(self.label.text()) == 1:
            self.label.setText("0")
            return
        else:
            self.label.setText(self.label.text()[:-1:])
            return
        
    def reset_label(self):
        self.label.setText("0")
        return
        
    def do_equal(self):
        nums = []
        operator = None
        for i in self.symbols:
            if i in self.label.text():
                for num in self.label.text().split(i):
                    nums.append(num)
                operator = i
                break
        else:
            return
        if operator == "+":
            result = float(nums[0]) + float(nums[1])
            if "." in str(result):
                if len(str(result).split(".")[1]) < 7:
                    self.label.setText(str(result))
                else:
                    self.label.setText(str(round(result, 6)))         
        if operator == "-":
            result = float(nums[0]) - float(nums[1])
            if "." in str(result):
                if len(str(result).split(".")[1]) < 7:
                    self.label.setText(str(result))
                else:
                    self.label.setText(str(round(result, 6)))
        if operator == "/":
            try:
                result = float(nums[0]) / float(nums[1])
            except:
                self.label.setText("Error")
                self.after_equal = True
                return
            if "." in str(result):
                if len(str(result).split(".")[1]) < 7:
                    self.label.setText(str(result))
                else:
                    self.label.setText(str(round(result, 6)))
        if operator == "*":
            result = float(nums[0]) * float(nums[1])
            if "." in str(result):
                if len(str(result).split(".")[1]) < 7:
                    self.label.setText(str(result))
                else:
                    self.label.setText(str(round(result, 6)))
        
        self.after_equal = True
        nums = []


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
